{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","commently/tests/app.lint-test.js","commently/tests/helpers/destroy-app.js","commently/tests/helpers/ember-simple-auth.js","commently/tests/helpers/module-for-acceptance.js","commently/tests/helpers/resolver.js","commently/tests/helpers/start-app.js","commently/tests/integration/components/post-comment-test.js","commently/tests/integration/components/post-full-test.js","commently/tests/integration/components/post-tile-test.js","commently/tests/integration/components/x-input-test.js","commently/tests/integration/components/x-textarea-test.js","commently/tests/integration/helpers/titleize-test.js","commently/tests/test-helper.js","commently/tests/tests.lint-test.js","commently/tests/unit/adapters/application-test.js","commently/tests/unit/controllers/application-test.js","commently/tests/unit/helpers/tease-test.js","commently/tests/unit/initializers/geo-test.js","commently/tests/unit/mixins/text-field-test.js","commently/tests/unit/models/comment-test.js","commently/tests/unit/models/post-test.js","commently/tests/unit/models/user-test.js","commently/tests/unit/routes/application-test.js","commently/tests/unit/routes/auth/login-test.js","commently/tests/unit/routes/auth/register-test.js","commently/tests/unit/routes/index-test.js","commently/tests/unit/routes/posts-test.js","commently/tests/unit/routes/posts/index-test.js","commently/tests/unit/routes/posts/show-test.js","commently/tests/unit/services/current-user-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('commently/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'app.js should pass ESLint\\n\\n6:1 - Unexpected console statement. (no-console)\\n7:1 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('authenticators/oauth2.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authenticators/oauth2.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('authorizers/oauth2.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authorizers/oauth2.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('session-stores/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'session-stores/application.js should pass ESLint\\n\\n');\n  });\n});","define('commently/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  var run = Ember.run;\n  function destroyApp(application) {\n    run(application, 'destroy');\n  }\n});","define('commently/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _test) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n\n  var TEST_CONTAINER_KEY = 'authenticator:test'; /* global wait */\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _test.default);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  }\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  }\n});","define('commently/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'commently/tests/helpers/start-app', 'commently/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var resolve = Ember.RSVP.resolve;\n});","define('commently/tests/helpers/resolver', ['exports', 'commently/resolver', 'commently/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('commently/tests/helpers/start-app', ['exports', 'commently/app', 'commently/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  var merge = Ember.merge;\n  var run = Ember.run;\n  function startApp(attrs) {\n    var attributes = merge({}, _environment.default.APP);\n    attributes = merge(attributes, attrs); // use defaults, but you can override;\n\n    return run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('commently/tests/integration/components/post-comment-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('post-comment', 'Integration | Component | post comment', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ikl5YKHU\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"post-comment\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n  });\n});","define('commently/tests/integration/components/post-full-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('post-full', 'Integration | Component | post full', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n    this.set('model', {\n      title: 'My Post',\n      body: 'this is the body',\n      createdAt: '2016-12-07T23:48:13.678Z',\n      updatedAt: '2016-12-07T23:48:13.678Z'\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"75xrZcgA\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"post-full\\\",null,[[\\\"model\\\"],[[22,[\\\"model\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n    var innerText = this.$().text().replace(/\\s+/g, '');\n    assert.ok(innerText.indexOf('WrittenAt') >= 0, 'Written At is present');\n  });\n});","define('commently/tests/integration/components/post-tile-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('post-tile', 'Integration | Component | post tile', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n    this.set('model', {\n      title: 'My Post',\n      body: 'this is the body',\n      createdAt: '2016-12-07T23:48:13.678Z',\n      updatedAt: '2016-12-07T23:48:13.678Z'\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"w5cMuPUn\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"post-tile\\\",null,[[\\\"model\\\"],[[22,[\\\"model\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n    var innerText = this.$().text().replace(/\\s+/g, '');\n    assert.ok(innerText.indexOf('') >= 0, '');\n  });\n});","define('commently/tests/integration/components/x-input-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('x-input', 'Integration | Component | x input', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"SNn054Rs\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"x-input\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n  });\n});","define('commently/tests/integration/components/x-textarea-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('x-textarea', 'Integration | Component | x textarea', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"vdevsYCn\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"x-textarea\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n  });\n});","define('commently/tests/integration/helpers/titleize-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('titleize', 'helper:titleize', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"9o5Jlxj8\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"titleize\\\",[[22,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('commently/tests/test-helper', ['commently/app', 'commently/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('commently/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/post-comment-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/post-comment-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/post-full-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/post-full-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/post-tile-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/post-tile-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/x-input-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-input-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/x-textarea-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/x-textarea-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/titleize-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/titleize-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/tease-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/tease-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/text-field-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/text-field-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/comment-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/comment-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/post-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/post-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/auth/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/auth/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/auth/register-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/auth/register-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/posts-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/posts-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/posts/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/posts/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/posts/show-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/posts/show-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/current-user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/current-user-test.js should pass ESLint\\n\\n');\n  });\n});","// import { moduleFor, test } from 'ember-qunit';\n\n// moduleFor('adapter:application', 'Unit | Adapter | application', {\n//   // Specify the other units that are required for this test.\n//   // needs: ['serializer:foo']\n// });\n\n// // Replace this with your real tests.\n// test('it exists', function(assert) {\n//   let adapter = this.subject();\n//   assert.ok(adapter);\n// });\ndefine(\"commently/tests/unit/adapters/application-test\", [], function () {\n  \"use strict\";\n});","define('commently/tests/unit/controllers/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:application', 'Unit | Controller | application', {\n    // Specify the other units that are required for this test.\n    needs: ['service:current-user']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('commently/tests/unit/helpers/tease-test', ['commently/helpers/tease', 'qunit'], function (_tease, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | tease');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _tease.tease)([42]);\n    assert.ok(result);\n  });\n});","define('commently/tests/unit/initializers/geo-test', ['commently/initializers/geo', 'qunit', 'ember-qunit', 'commently/tests/helpers/destroy-app'], function (_geo, _qunit, _emberQunit, _destroyApp) {\n    'use strict';\n\n    function _asyncToGenerator(fn) {\n        return function () {\n            var gen = fn.apply(this, arguments);\n            return new Promise(function (resolve, reject) {\n                function step(key, arg) {\n                    try {\n                        var info = gen[key](arg);\n                        var value = info.value;\n                    } catch (error) {\n                        reject(error);\n                        return;\n                    }\n\n                    if (info.done) {\n                        resolve(value);\n                    } else {\n                        return Promise.resolve(value).then(function (value) {\n                            step(\"next\", value);\n                        }, function (err) {\n                            step(\"throw\", err);\n                        });\n                    }\n                }\n\n                return step(\"next\");\n            });\n        };\n    }\n\n    var Application = Ember.Application;\n\n    (0, _qunit.module)('Unit | Initializer | geo', function (hooks) {\n        (0, _emberQunit.setupTest)(hooks);\n        hooks.beforeEach(function () {\n            this.TestApplication = Application.extend();\n            this.TestApplication.initializer({\n                name: 'initializer under test',\n                initialize: _geo.initialize\n            });\n            this.application = this.TestApplication.create({ autoboot: false });\n        });\n        hooks.afterEach(function () {\n            (0, _destroyApp.default)(this.application);\n        });\n        // Replace this with your real tests.\n        (0, _qunit.test)('it works', function () {\n            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(assert) {\n                return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                        switch (_context.prev = _context.next) {\n                            case 0:\n                                _context.next = 2;\n                                return this.application.boot();\n\n                            case 2:\n                                assert.ok(true);\n\n                            case 3:\n                            case 'end':\n                                return _context.stop();\n                        }\n                    }\n                }, _callee, this);\n            }));\n\n            return function (_x) {\n                return _ref.apply(this, arguments);\n            };\n        }());\n    });\n});","define('commently/tests/unit/mixins/text-field-test', ['commently/mixins/text-field', 'qunit'], function (_textField, _qunit) {\n  'use strict';\n\n  var Obj = Ember.Object;\n\n\n  (0, _qunit.module)('Unit | Mixin | text field');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var TextFieldObject = Obj.extend(_textField.default);\n    var subject = TextFieldObject.create();\n    assert.ok(subject);\n  });\n});","define('commently/tests/unit/models/comment-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('comment', 'Unit | Model | comment', {\n    // Specify the other units that are required for this test.\n    needs: ['model:post']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('commently/tests/unit/models/post-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('post', 'Unit | Model | post', {\n    // Specify the other units that are required for this test.\n    needs: ['model:comment']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('commently/tests/unit/models/user-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('user', 'Unit | Model | user', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('commently/tests/unit/routes/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    needs: ['service:session', 'service:currentUser']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('commently/tests/unit/routes/auth/login-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:auth/login', 'Unit | Route | auth/login', {\n    // Specify the other units that are required for this test.\n    needs: ['service:session', 'service:currentUser']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('commently/tests/unit/routes/auth/register-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:auth/register', 'Unit | Route | auth/register', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('commently/tests/unit/routes/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('commently/tests/unit/routes/posts-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:posts', 'Unit | Route | posts', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('commently/tests/unit/routes/posts/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:posts/index', 'Unit | Route | posts/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('commently/tests/unit/routes/posts/show-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:posts/show', 'Unit | Route | posts/show', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('commently/tests/unit/services/current-user-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:current-user', 'Unit | Service | current user', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('commently/config/environment', [], function() {\n  var prefix = 'commently';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('commently/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClrIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbjBA;AACA;","file":"tests.js"}